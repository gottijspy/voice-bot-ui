{"version":3,"sources":["ArtyomCommands.js","App.js","serviceWorker.js","index.js","microphone.svg"],"names":["ArtyomCommandsManager","ArtyomInstance","this","_artyom","callback","Artyom","addCommands","indexes","action","newPrompt","question","smart","options","onEndPrompt","onMatch","i","wildcard","name","charAt","toUpperCase","slice","today","Date","time","getHours","getMinutes","getSeconds","usaToday","toLocaleString","timeZone","usaTime","Arya","App","props","context","transcriptCount","startAssistant","bind","stopAssistant","speakText","handleTextareaChange","state","pulse","micStatus","micText","transcripts","loadCommands","msg","speak","_this","setState","concat","id","who","text","say","onEnd","pulsate","console","log","initialize","lang","debug","continuous","soundex","listen","then","catch","err","error","redirectRecognizedTextOutput","isFinal","matchCommand","commandText","when","fetch","res","json","data","fatality","artyomActive","event","textareaValue","target","value","btn_class","dialog_class","className","onClick","src","microphone","alt","map","transcript","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.dc74eedf.chunk.js","sourcesContent":["// ArtyomCommands.js\nexport default class ArtyomCommandsManager {\n  // The ArtyomCommandsManager class expects as argument in the constructor\n  // an already declared instance of Artyom.js\n  constructor(ArtyomInstance) {\n    this._artyom = ArtyomInstance;\n  }\n\n  // Execute the loadCommands method to inject the methods to the instance of Artyom\n  loadCommands(callback) {\n    let Artyom = this._artyom;\n\n    // Here you can load all the commands that you want to Artyom\n    return Artyom.addCommands([\n      {\n        indexes: [\"Hello\", \"Hi\", \"Hey\"],\n        action: () => {\n          Artyom.newPrompt({\n            question: \"Hello there! May I have your name please?\",\n            smart: true, //We set the smart property to true to accept wildcards\n            options: [\"My name is  *\", \"This is *\", \"* here\"],\n            onEndPrompt: () => {\n              callback(\"Hello there! May I have your name please?\", false);\n            },\n            onMatch: (i, wildcard) => {\n              // i returns the index of the given options\n              var action;\n              var name = wildcard.charAt(0).toUpperCase() + wildcard.slice(1);\n              action = () => {\n                callback(\"Welcome, \" + name);\n              };\n\n              // A function needs to be returned in onMatch event\n              // in order to accomplish what you want to execute\n              return action;\n            }\n          });\n          //callback(\"Hello there! May I have your name please?\");\n        }\n      },\n      {\n        indexes: [\"what's your name\", \"your name\"],\n        action: () => {\n          callback(\"My name is Arya, what's yours?\");\n        }\n      },\n      {\n        indexes: [\"Bye\", \"Stop\", \"Good Bye\", \"Goodbye\"],\n        action: () => {\n          callback(\"stopAssistant\");\n        }\n      },\n      {\n        indexes: [\"What's the time now?\", \"time now\"],\n        action: () => {\n          var today = new Date();\n          var time =\n            today.getHours() +\n            \":\" +\n            today.getMinutes() +\n            \":\" +\n            today.getSeconds();\n          callback(time);\n        }\n      },\n      {\n        indexes: [\"What's the time in US East Coast?\", \"US East Coast time\"],\n        action: () => {\n          var usaToday = new Date().toLocaleString(\"en-US\", {\n            timeZone: \"America/New_York\"\n          });\n          var usaTime =\n            usaToday.getHours() +\n            \":\" +\n            usaToday.getMinutes() +\n            \":\" +\n            usaToday.getSeconds();\n          callback(usaTime);\n        }\n      },\n      {\n        indexes: [/How are you/, /Regular expressions supported/],\n        smart: true,\n        action: () => {\n          callback(\"I'm fine, thanks for asking !\");\n        }\n      }\n    ]);\n  }\n}\n","import React from \"react\";\nimport Artyom from \"artyom.js\";\nimport \"./App.css\";\nimport microphone from \"./microphone.svg\";\nimport ArtyomCommandsManager from \"./ArtyomCommands.js\";\n\nconst Arya = new Artyom();\n\nclass App extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.transcriptCount = 0;\n\n    // Add `this` context to the handler functions\n    this.startAssistant = this.startAssistant.bind(this);\n    this.stopAssistant = this.stopAssistant.bind(this);\n    this.speakText = this.speakText.bind(this);\n    this.handleTextareaChange = this.handleTextareaChange.bind(this);\n\n    this.state = {\n      pulse: false,\n      micStatus: \"\",\n      micText: \"tap on microphone to get started...\",\n      transcripts: []\n    };\n\n    // Load some commands to Artyom using the commands manager\n    let CommandsManager = new ArtyomCommandsManager(Arya);\n    CommandsManager.loadCommands(this.speakText);\n  }\n\n  speakText(msg, speak = true) {\n    let _this = this;\n\n    if (msg === \"stopAssistant\") {\n      _this.pulsate();\n      return;\n    }\n\n    _this.transcriptCount = _this.transcriptCount + 1;\n    _this.setState({\n      transcripts: _this.state.transcripts.concat({\n        id: _this.transcriptCount,\n        who: \"Arya\",\n        text: msg\n      })\n    });\n\n    if (speak) {\n      _this.setState({ micText: \"speaking...\" });\n      Arya.say(msg, {\n        onEnd: function() {\n          _this.setState({ micText: \"listening...\" });\n        }\n      });\n    }\n  }\n\n  startAssistant() {\n    let _this = this;\n\n    console.log(\"Artyom succesfully started !\");\n\n    Arya.initialize({\n      lang: \"en-GB\",\n      debug: true,\n      continuous: true,\n      soundex: true,\n      listen: true\n    })\n      .then(() => {\n        _this.setState({ micText: \"listening...\" });\n      })\n      .catch(err => {\n        console.error(\"Oopsy daisy, this shouldn't happen !\", err);\n      });\n\n    Arya.redirectRecognizedTextOutput(function(text, isFinal) {\n      _this.setState({ micText: text });\n      if (isFinal) {\n        _this.transcriptCount = _this.transcriptCount + 1;\n        _this.setState(\n          {\n            transcripts: _this.state.transcripts.concat({\n              id: _this.transcriptCount,\n              who: \"You\",\n              text: text\n            })\n          },\n          _this.matchCommand(text)\n        );\n\n        _this.setState({ micText: \"listening...\" });\n      }\n    });\n  }\n\n  matchCommand(commandText) {\n    // Add the event listener\n    Arya.when(\"NOT_COMMAND_MATCHED\", () => {\n      fetch(\n        \"https://tranquil-garden-78271.herokuapp.com/predict?q=\" + commandText\n      )\n        .then(res => res.json())\n        .then(res => {\n          this.speakText(res.data);\n        });\n    });\n  }\n\n  stopAssistant() {\n    let _this = this;\n\n    Arya.fatality()\n      .then(() => {\n        console.log(\"Arya has been succesfully stopped\");\n        _this.setState({ micText: \"tap on microphone to get started...\" });\n      })\n      .catch(err => {\n        console.error(\"Oopsy daisy, this shouldn't happen neither!\", err);\n\n        _this.setState({\n          artyomActive: false\n        });\n      });\n  }\n\n  handleTextareaChange(event) {\n    this.setState({\n      textareaValue: event.target.value\n    });\n  }\n\n  pulsate() {\n    this.setState({ pulse: !this.state.pulse }, () => {\n      if (this.state.pulse) {\n        this.startAssistant();\n      } else {\n        this.stopAssistant();\n      }\n    });\n  }\n\n  render() {\n    let btn_class = this.state.pulse ? \"pulse pulse-active\" : \"pulse\";\n    let dialog_class = this.state.pulse ? \"transcript-show\" : \"transcript-hide\";\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* Microphone */}\n          <button onClick={this.pulsate.bind(this)} className={btn_class}>\n            <img src={microphone} className=\"App-logo\" alt=\"logo\" />\n          </button>\n\n          {/* recognition in progress */}\n          <p className=\"micStatus anim-typewriter\">{this.state.micText}</p>\n\n          {/* Speech Transcripts */}\n          <div className={dialog_class}>\n            {this.state.transcripts.map(transcript => (\n              <p\n                className={\n                  transcript.who === \"Arya\" ? \"dialog-said\" : \"dialog-heard\"\n                }\n                key={transcript.id}\n              >\n                {transcript.who + \": \" + transcript.text}\n              </p>\n            ))}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/microphone.85e4dcb4.svg\";"],"sourceRoot":""}